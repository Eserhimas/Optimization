# -*- coding: utf-8 -*-
"""constraint_programming_ORTools.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J2ukiRGCkvBlm48_j9ejG6oVX6SlqWbV
"""

pip install ortools

from ortools.sat.python import cp_model

model = cp_model.CpModel()

# variables

shifts = {'Morning': 'M', 'Afternoon': 'A', 'Evening': 'E'}
employees = ['Mark', 'Elon', 'David', 'Steve', 'Alan']
days = range(7) # 0: Monday etc.

schedule = {}

for i in employees:
  for j in days:
    for k in shifts.values():
      schedule[(i, j, k)] = model.NewBoolVar(f'{i}_{j}_{k}')

print(schedule)

schedule

# Constraints

# 5 shifts per week
for i in employees:
  model.Add(sum(schedule[(i, day, shift)] for day in days for shift in shifts.values())==5)

# no more than 2 consecutive shifts
for i in employees:
  for j in range(5):
    for k in shifts.values():
      model.Add(sum(schedule[(i, z, k)] for z in range(j, j+3))<=2)

# Elon and Mark shouldn't work together
for i in days:
  for j in shifts.values():
    model.Add(schedule[('Mark', i, j)] + schedule[('Elon', i, j)] <=1)

# David and Steve shouldn't work together
for i in days:
  for j in shifts.values():
    model.Add(schedule[('David', i, j)] + schedule[('Steve', i, j)] <=1)

# Elon and Alan shouldn't work together
for i in days:
  for j in shifts.values():
    model.Add(schedule[('Elon', i, j)] + schedule[('Alan', i, j)] <=1)


# Mark and Steve shouldn't work together
for i in days:
  for j in shifts.values():
    model.Add(schedule[('Mark', i, j)] + schedule[('Steve', i, j)] <=1)

# solver func
solver = cp_model.CpSolver()
status = solver.Solve(model)

# solving the problem

if status == cp_model.OPTIMAL or status == cp_model.FEASIBLE:
  print('Solution:')
  for i in days:
    print(f'Day {i}: ')
    for j in employees:
      for k in shifts.values():
        if solver.Value(schedule[(j, i, k)]):
          print(f'{j}: {k}')
  print()

else:
  print('No solution found.')

